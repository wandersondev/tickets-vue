{"version":3,"file":"VTreeviewItem.js","names":["VAvatar","VBtn","VDefaultsProvider","VIcon","VListItemAction","makeVListItemProps","VListItem","VProgressCircular","forwardRefs","IconValue","computed","inject","ref","toRaw","VTreeviewSymbol","genericComponent","propsFactory","useRender","makeVTreeviewItemProps","loading","Boolean","hideActions","hasCustomPrepend","indentLines","Array","toggleIcon","slim","VTreeviewItem","name","props","emits","toggleExpand","value","setup","_ref","slots","emit","visibleIds","vListItemRef","isActivatableGroupActivator","root","activatable","isGroupActivator","vListItemRefIsClickable","link","isClickable","list","disabled","isFiltered","has","id","activateGroupActivator","e","activate","isActivated","onClickAction","preventDefault","stopPropagation","listItemProps","filterProps","hasPrepend","prepend","prependIcon","prependAvatar","_createVNode","_mergeProps","undefined","class","slotProps","_createElementVNode","_Fragment","length","map","type","_normalizeClass","default","toggle","loader","density","icon","variant","indeterminate","size","width","onClick","image","appendAvatar","appendIcon","start"],"sources":["../../../src/components/VTreeview/VTreeviewItem.tsx"],"sourcesContent":["// Styles\nimport './VTreeviewItem.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VBtn } from '@/components/VBtn'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\nimport { VListItemAction } from '@/components/VList'\nimport { makeVListItemProps, VListItem } from '@/components/VList/VListItem'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { computed, inject, ref, toRaw } from 'vue'\nimport { VTreeviewSymbol } from './shared'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { ToggleListItemSlot } from './shared'\nimport type { VListItemSlots } from '@/components/VList/VListItem'\nimport type { IndentLineType } from '@/util'\n\nexport const makeVTreeviewItemProps = propsFactory({\n  loading: Boolean,\n  hideActions: Boolean,\n  hasCustomPrepend: Boolean,\n  indentLines: Array as PropType<IndentLineType[]>,\n  toggleIcon: IconValue,\n\n  ...makeVListItemProps({ slim: true }),\n}, 'VTreeviewItem')\n\nexport type VTreeviewItemSlots = VListItemSlots & {\n  toggle: ToggleListItemSlot & { loading: boolean }\n}\n\nexport const VTreeviewItem = genericComponent<VTreeviewItemSlots>()({\n  name: 'VTreeviewItem',\n\n  props: makeVTreeviewItemProps(),\n\n  emits: {\n    toggleExpand: (value: PointerEvent) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const visibleIds = inject(VTreeviewSymbol, { visibleIds: ref() }).visibleIds\n\n    const vListItemRef = ref<VListItem>()\n\n    const isActivatableGroupActivator = computed(() =>\n      (vListItemRef.value?.root.activatable.value) &&\n      vListItemRef.value?.isGroupActivator\n    )\n    const vListItemRefIsClickable = computed(() => (\n      vListItemRef.value?.link.isClickable.value ||\n      (props.value != null && !!vListItemRef.value?.list)\n    ))\n    const isClickable = computed(() =>\n      !props.disabled &&\n      props.link !== false &&\n      (props.link || vListItemRefIsClickable.value || isActivatableGroupActivator.value)\n    )\n    const isFiltered = computed(() => visibleIds.value && !visibleIds.value.has(toRaw(vListItemRef.value?.id)))\n\n    function activateGroupActivator (e: MouseEvent | KeyboardEvent) {\n      if (isClickable.value && isActivatableGroupActivator.value) {\n        vListItemRef.value?.activate(!vListItemRef.value?.isActivated, e)\n      }\n    }\n\n    function onClickAction (e: PointerEvent) {\n      e.preventDefault()\n      e.stopPropagation()\n      emit('toggleExpand', e)\n    }\n\n    useRender(() => {\n      const listItemProps = VListItem.filterProps(props)\n      const hasPrepend = slots.prepend ||\n        props.toggleIcon ||\n        props.indentLines ||\n        props.prependIcon ||\n        props.prependAvatar\n\n      return (\n        <VListItem\n          ref={ vListItemRef }\n          { ...listItemProps }\n          active={ vListItemRef.value?.isActivated || undefined }\n          class={[\n            'v-treeview-item',\n            {\n              'v-treeview-item--activatable-group-activator': isActivatableGroupActivator.value,\n              'v-treeview-item--filtered': isFiltered.value,\n            },\n            props.class,\n          ]}\n          ripple={ false }\n          onClick={ activateGroupActivator }\n        >\n          {{\n            ...slots,\n            prepend: hasPrepend ? slotProps => {\n              return (\n                <>\n                  { props.indentLines && props.indentLines.length > 0 ? (\n                    <div\n                      key=\"indent-lines\"\n                      class=\"v-treeview-indent-lines\"\n                      style={{ '--v-indent-parts': props.indentLines.length }}\n                    >\n                      { props.indentLines.map(type => (\n                        <div class={ `v-treeview-indent-line v-treeview-indent-line--${type}` } />\n                      ))}\n                    </div>\n                  ) : '' }\n                  { !props.hideActions && (\n                    <VListItemAction start>\n                      { props.toggleIcon ? (\n                        <>\n                          { !slots.toggle ? (\n                            <VBtn\n                              key=\"prepend-toggle\"\n                              density=\"compact\"\n                              icon={ props.toggleIcon }\n                              loading={ props.loading }\n                              variant=\"text\"\n                              onClick={ onClickAction }\n                            >\n                              {{\n                                loader: () => (\n                                  <VProgressCircular\n                                    indeterminate=\"disable-shrink\"\n                                    size=\"20\"\n                                    width=\"2\"\n                                  />\n                                ),\n                              }}\n                            </VBtn>\n                          ) : (\n                            <VDefaultsProvider\n                              key=\"prepend-defaults\"\n                              defaults={{\n                                VBtn: {\n                                  density: 'compact',\n                                  icon: props.toggleIcon,\n                                  variant: 'text',\n                                  loading: props.loading,\n                                },\n                                VProgressCircular: {\n                                  indeterminate: 'disable-shrink',\n                                  size: 20,\n                                  width: 2,\n                                },\n                              }}\n                            >\n                              { slots.toggle({\n                                ...slotProps,\n                                loading: props.loading,\n                                props: {\n                                  onClick: onClickAction,\n                                },\n                              })}\n                            </VDefaultsProvider>\n                          )}\n                        </>\n                      ) : (\n                        <div class=\"v-treeview-item__level\" />\n                      )}\n                    </VListItemAction>\n                  )}\n\n                  { !props.hasCustomPrepend ? (\n                    <>\n                      { slots.prepend?.(slotProps) }\n                      { props.prependAvatar && (\n                        <VAvatar\n                          key=\"prepend-avatar\"\n                          density={ props.density }\n                          image={ props.prependAvatar }\n                        />\n                      )}\n\n                      { props.prependIcon && (\n                        <VIcon\n                          key=\"prepend-icon\"\n                          density={ props.density }\n                          icon={ props.prependIcon }\n                        />\n                      )}\n                    </>\n                  ) : (\n                    <VDefaultsProvider\n                      key=\"prepend-defaults\"\n                      defaults={{\n                        VAvatar: {\n                          density: props.density,\n                          image: props.appendAvatar,\n                        },\n                        VIcon: {\n                          density: props.density,\n                          icon: props.appendIcon,\n                        },\n                        VListItemAction: {\n                          start: true,\n                        },\n                      }}\n                    >\n                      { slots.prepend?.(slotProps) }\n                    </VDefaultsProvider>\n                  )}\n                </>\n              )\n            } : undefined,\n          }}\n        </VListItem>\n      )\n    })\n\n    return forwardRefs({}, vListItemRef)\n  },\n})\n\nexport type VTreeviewItem = InstanceType<typeof VTreeviewItem>\n"],"mappings":"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","ignoreList":[]}