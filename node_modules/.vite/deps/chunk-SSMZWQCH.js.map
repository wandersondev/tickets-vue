{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTextField/VTextField.tsx"],
  "sourcesContent": ["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { VCounter } from '@/components/VCounter/VCounter'\nimport { makeVFieldProps, VField } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { makeAutocompleteProps, useAutocomplete } from '@/composables/autocomplete'\nimport { useAutofocus } from '@/composables/autofocus'\nimport { useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport vIntersect from '@/directives/intersect'\n\n// Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue'\nimport { callEvent, filterInputAttrs, genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VCounterSlot } from '@/components/VCounter/VCounter'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String],\n  counterValue: [Number, Function] as PropType<number | ((value: any) => number)>,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  role: String,\n  type: {\n    type: String,\n    default: 'text',\n  },\n  modelModifiers: Object as PropType<Record<string, boolean>>,\n\n  ...makeAutocompleteProps(),\n  ...makeVInputProps(),\n  ...makeVFieldProps(),\n}, 'VTextField')\n\nexport type VTextFieldSlots = Omit<VInputSlots & VFieldSlots, 'default'> & {\n  default: never\n  counter: VCounterSlot\n}\n\nexport const VTextField = genericComponent<VTextFieldSlots>()({\n  name: 'VTextField',\n\n  directives: { vIntersect },\n\n  inheritAttrs: false,\n\n  props: makeVTextFieldProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const { onIntersect } = useAutofocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value)\n        : typeof props.counterValue === 'number' ? props.counterValue\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as unknown as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant))\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VField>()\n    const inputRef = ref<HTMLInputElement>()\n    const autocomplete = useAutocomplete(props)\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value ||\n      props.active\n    ))\n    function onFocus () {\n      if (autocomplete.isSuppressing.value) {\n        autocomplete.update()\n      }\n\n      if (!isFocused.value) focus()\n\n      nextTick(() => {\n        if (inputRef.value !== document.activeElement) {\n          inputRef.value?.focus()\n        }\n      })\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n\n      if (e.target === inputRef.value) return\n\n      onFocus()\n      e.preventDefault()\n    }\n    function onControlClick (e: MouseEvent) {\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent, reset: () => void) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = null\n        reset()\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLInputElement\n      model.value = el.value\n      if (\n        props.modelModifiers?.trim &&\n        ['text', 'search', 'password', 'tel', 'url'].includes(props.type)\n      ) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || (props.counter !== false && props.counter != null))\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const { modelValue: _, ...inputProps } = VInput.filterProps(props)\n      const fieldProps = VField.filterProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-input--plain-underlined': isPlainOrUnderlined.value,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          { ...rootAttrs }\n          { ...inputProps }\n          centerAffix={ !isPlainOrUnderlined.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n              hasDetails,\n              reset,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ onControlMousedown }\n                onClick={ onControlClick }\n                onClick:clear={ (e: MouseEvent) => onClear(e, reset) }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role={ props.role }\n                { ...omit(fieldProps, ['onClick:clear']) }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                details={ hasDetails.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    const inputNode = (\n                      <input\n                        ref={ inputRef }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        name={ autocomplete.fieldName.value }\n                        autocomplete={ autocomplete.fieldAutocomplete.value }\n                        placeholder={ props.placeholder }\n                        size={ 1 }\n                        role={ props.role }\n                        type={ props.type }\n                        onFocus={ focus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n                    )\n\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            <span class=\"v-text-field__prefix__text\">\n                              { props.prefix }\n                            </span>\n                          </span>\n                        )}\n\n                        { slots.default ? (\n                          <div\n                            class={ fieldClass }\n                            data-no-activator=\"\"\n                          >\n                            { slots.default() }\n                            { inputNode }\n                          </div>\n                        ) : cloneVNode(inputNode, { class: fieldClass })}\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            <span class=\"v-text-field__suffix__text\">\n                              { props.suffix }\n                            </span>\n                          </span>\n                        )}\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      disabled={ props.disabled }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"],
  "mappings": "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",
  "names": ["activeTypes", "makeVTextFieldProps", "propsFactory", "autofocus", "Boolean", "counter", "Number", "String", "counterValue", "Function", "prefix", "placeholder", "persistentPlaceholder", "persistentCounter", "suffix", "role", "type", "default", "modelModifiers", "Object", "makeAutocompleteProps", "makeVInputProps", "makeVFieldProps", "VTextField", "genericComponent", "name", "directives", "vIntersect", "inheritAttrs", "props", "emits", "e", "focused", "val", "setup", "_ref", "attrs", "emit", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "onIntersect", "useAutofocus", "computed", "value", "toString", "length", "max", "maxlength", "undefined", "isPlainOrUnderlined", "includes", "variant", "vInputRef", "ref", "vFieldRef", "inputRef", "autocomplete", "useAutocomplete", "isActive", "active", "onFocus", "isSuppressing", "update", "nextTick", "document", "activeElement", "onControlMousedown", "target", "preventDefault", "onControlClick", "onClear", "reset", "stopPropagation", "callEvent", "onInput", "el", "trim", "caretPosition", "selectionStart", "selectionEnd", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "modelValue", "_", "inputProps", "VInput", "filterProps", "fieldProps", "VField", "_createVNode", "_mergeProps", "$event", "class", "style", "_ref2", "id", "isDisabled", "isDirty", "isReadonly", "isValid", "omit", "dirty", "_ref3", "fieldClass", "slotProps", "inputNode", "_withDirectives", "_createElementVNode", "fieldName", "fieldAutocomplete", "handler", "once", "_Fragment", "_normalizeClass", "cloneVNode", "VCounter", "disabled", "forwardRefs"]
}
