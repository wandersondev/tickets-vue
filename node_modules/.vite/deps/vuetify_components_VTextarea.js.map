{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTextarea/VTextarea.tsx"],
  "sourcesContent": ["// Styles\nimport './VTextarea.sass'\nimport '../VTextField/VTextField.sass'\n\n// Components\nimport { VCounter } from '@/components/VCounter/VCounter'\nimport { VField } from '@/components/VField'\nimport { makeVFieldProps } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { makeAutocompleteProps, useAutocomplete } from '@/composables/autocomplete'\nimport { useAutofocus } from '@/composables/autofocus'\nimport { useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport vIntersect from '@/directives/intersect'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, shallowRef, watch, watchEffect } from 'vue'\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VCounterSlot } from '@/components/VCounter/VCounter'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport const makeVTextareaProps = propsFactory({\n  autoGrow: Boolean,\n  autofocus: Boolean,\n  counter: [Boolean, Number, String] as PropType<true | number | string>,\n  counterValue: Function as PropType<(value: any) => number>,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  noResize: Boolean,\n  rows: {\n    type: [Number, String],\n    default: 5,\n    validator: (v: any) => !isNaN(parseFloat(v)),\n  },\n  maxRows: {\n    type: [Number, String],\n    validator: (v: any) => !isNaN(parseFloat(v)),\n  },\n  suffix: String,\n  modelModifiers: Object as PropType<Record<string, boolean>>,\n\n  ...makeAutocompleteProps(),\n  ...makeVInputProps(),\n  ...makeVFieldProps(),\n}, 'VTextarea')\n\ntype VTextareaSlots = Omit<VInputSlots & VFieldSlots, 'default'> & {\n  counter: VCounterSlot\n}\n\nexport const VTextarea = genericComponent<VTextareaSlots>()({\n  name: 'VTextarea',\n\n  directives: { vIntersect },\n\n  inheritAttrs: false,\n\n  props: makeVTextareaProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n    'update:rows': (rows: number) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const { onIntersect } = useAutofocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as string | number\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const controlHeight = shallowRef('')\n    const textareaRef = ref<HTMLInputElement>()\n    const autocomplete = useAutocomplete(props)\n    const isActive = computed(() => (\n      props.persistentPlaceholder ||\n      isFocused.value ||\n      props.active\n    ))\n\n    function onFocus () {\n      if (autocomplete.isSuppressing.value) {\n        autocomplete.update()\n      }\n\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLTextAreaElement\n      model.value = el.value\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    const rows = ref(Number(props.rows))\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant))\n    watchEffect(() => {\n      if (!props.autoGrow) rows.value = Number(props.rows)\n    })\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-input-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = Math.max(\n          parseFloat(props.rows) * lineHeight + padding,\n          parseFloat(fieldStyle.getPropertyValue('--v-input-control-height'))\n        )\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n        const newHeight = clamp(height ?? 0, minHeight, maxHeight)\n        rows.value = Math.floor((newHeight - padding) / lineHeight)\n\n        controlHeight.value = convertToUnit(newHeight)\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n    watch(() => props.density, calculateInputHeight)\n    watch(rows, val => {\n      emit('update:rows', val)\n    })\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const { modelValue: _, ...inputProps } = VInput.filterProps(props)\n      const fieldProps = {\n        ...VField.filterProps(props),\n        'onClick:clear': onClear,\n      }\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-textarea v-text-field',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n              'v-input--plain-underlined': isPlainOrUnderlined.value,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          { ...rootAttrs }\n          { ...inputProps }\n          centerAffix={ rows.value === 1 && !isPlainOrUnderlined.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n              hasDetails,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                style={{\n                  '--v-textarea-control-height': controlHeight.value,\n                }}\n                onClick={ onControlClick }\n                onMousedown={ onControlMousedown }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                centerAffix={ rows.value === 1 && !isPlainOrUnderlined.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                details={ hasDetails.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      )}\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ autocomplete.fieldName.value }\n                        autocomplete={ autocomplete.fieldAutocomplete.value }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          id={ `${slotProps.id}-sizer` }\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      )}\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      disabled={ props.disabled }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"],
  "mappings": "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",
  "names": ["makeVTextareaProps", "propsFactory", "autoGrow", "Boolean", "autofocus", "counter", "Number", "String", "counterValue", "Function", "prefix", "placeholder", "persistentPlaceholder", "persistentCounter", "noResize", "rows", "type", "default", "validator", "v", "isNaN", "parseFloat", "maxRows", "suffix", "modelModifiers", "Object", "makeAutocompleteProps", "makeVInputProps", "makeVFieldProps", "VTextarea", "genericComponent", "name", "directives", "vIntersect", "inheritAttrs", "props", "emits", "e", "focused", "val", "setup", "_ref", "attrs", "emit", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "onIntersect", "useAutofocus", "computed", "value", "toString", "length", "max", "maxlength", "undefined", "vInputRef", "ref", "vFieldRef", "controlHeight", "shallowRef", "textareaRef", "autocomplete", "useAutocomplete", "isActive", "active", "onFocus", "isSuppressing", "update", "document", "activeElement", "onControlClick", "onControlMousedown", "onClear", "stopPropagation", "nextTick", "callEvent", "onInput", "el", "target", "trim", "caretPosition", "selectionStart", "selectionEnd", "sizerRef", "isPlainOrUnderlined", "includes", "variant", "watchEffect", "calculateInputHeight", "style", "getComputedStyle", "fieldStyle", "$el", "padding", "getPropertyValue", "height", "scrollHeight", "lineHeight", "minHeight", "Math", "maxHeight", "Infinity", "newHeight", "clamp", "floor", "convertToUnit", "onMounted", "watch", "density", "observer", "ResizeObserver", "observe", "disconnect", "onBeforeUnmount", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "modelValue", "_", "inputProps", "VInput", "filterProps", "fieldProps", "VField", "_createVNode", "_mergeProps", "$event", "class", "_ref2", "id", "isDisabled", "isDirty", "isReadonly", "isValid", "dirty", "_ref3", "fieldClass", "slotProps", "_createElementVNode", "_Fragment", "_withDirectives", "fieldName", "fieldAutocomplete", "handler", "once", "_normalizeClass", "_vModelText", "VCounter", "disabled", "forwardRefs"]
}
