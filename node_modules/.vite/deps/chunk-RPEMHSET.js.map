{
  "version": 3,
  "sources": ["../../vuetify/src/composables/color.ts"],
  "sourcesContent": ["// Utilities\nimport { toValue } from 'vue'\nimport { destructComputed, getForeground, isCssColor, isParsableColor, parseColor } from '@/util'\n\n// Types\nimport type { CSSProperties, MaybeRefOrGetter, Ref } from 'vue'\n\nexport type ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: MaybeRefOrGetter<{ background?: ColorValue, text?: ColorValue }>) {\n  return destructComputed(() => {\n    const {\n      class: colorClasses,\n      style: colorStyles,\n    } = computeColor(colors)\n\n    return { colorClasses, colorStyles }\n  })\n}\n\nexport function useTextColor (color: MaybeRefOrGetter<ColorValue>): TextColorData {\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(() => ({\n    text: toValue(color),\n  }))\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: MaybeRefOrGetter<ColorValue>): BackgroundColorData {\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(() => ({\n    background: toValue(color),\n  }))\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n\nexport function computeColor (colors: MaybeRefOrGetter<{ background?: ColorValue, text?: ColorValue }>) {\n  const _colors = toValue(colors)\n  const classes: string[] = []\n  const styles: CSSProperties = {}\n\n  if (_colors.background) {\n    if (isCssColor(_colors.background)) {\n      styles.backgroundColor = _colors.background\n\n      if (!_colors.text && isParsableColor(_colors.background)) {\n        const backgroundColor = parseColor(_colors.background)\n        if (backgroundColor.a == null || backgroundColor.a === 1) {\n          const textColor = getForeground(backgroundColor)\n\n          styles.color = textColor\n          styles.caretColor = textColor\n        }\n      }\n    } else {\n      classes.push(`bg-${_colors.background}`)\n    }\n  }\n\n  if (_colors.text) {\n    if (isCssColor(_colors.text)) {\n      styles.color = _colors.text\n      styles.caretColor = _colors.text\n    } else {\n      classes.push(`text-${_colors.text}`)\n    }\n  }\n\n  return { class: classes, style: styles }\n}\n"],
  "mappings": ";;;;;;;;;;;;AAoBO,SAASA,SAAUC,QAA0E;AAClG,SAAOC,iBAAiB,MAAM;AAC5B,UAAM;MACJC,OAAOC;MACPC,OAAOC;IACT,IAAIC,aAAaN,MAAM;AAEvB,WAAO;MAAEG;MAAcE;IAAY;EACrC,CAAC;AACH;AAEO,SAASE,aAAcC,OAAoD;AAChF,QAAM;IACJL,cAAcM;IACdJ,aAAaK;EACf,IAAIX,SAAS,OAAO;IAClBY,MAAMC,QAAQJ,KAAK;EACrB,EAAE;AAEF,SAAO;IAAEC;IAAkBC;EAAgB;AAC7C;AAEO,SAASG,mBAAoBL,OAA0D;AAC5F,QAAM;IACJL,cAAcW;IACdT,aAAaU;EACf,IAAIhB,SAAS,OAAO;IAClBiB,YAAYJ,QAAQJ,KAAK;EAC3B,EAAE;AAEF,SAAO;IAAEM;IAAwBC;EAAsB;AACzD;AAEO,SAAST,aAAcN,QAA0E;AACtG,QAAMiB,UAAUL,QAAQZ,MAAM;AAC9B,QAAMkB,UAAoB,CAAA;AAC1B,QAAMC,SAAwB,CAAC;AAE/B,MAAIF,QAAQD,YAAY;AACtB,QAAII,WAAWH,QAAQD,UAAU,GAAG;AAClCG,aAAOE,kBAAkBJ,QAAQD;AAEjC,UAAI,CAACC,QAAQN,QAAQW,gBAAgBL,QAAQD,UAAU,GAAG;AACxD,cAAMK,kBAAkBE,WAAWN,QAAQD,UAAU;AACrD,YAAIK,gBAAgBG,KAAK,QAAQH,gBAAgBG,MAAM,GAAG;AACxD,gBAAMC,YAAYC,cAAcL,eAAe;AAE/CF,iBAAOX,QAAQiB;AACfN,iBAAOQ,aAAaF;QACtB;MACF;IACF,OAAO;AACLP,cAAQU,KAAK,MAAMX,QAAQD,UAAU,EAAE;IACzC;EACF;AAEA,MAAIC,QAAQN,MAAM;AAChB,QAAIS,WAAWH,QAAQN,IAAI,GAAG;AAC5BQ,aAAOX,QAAQS,QAAQN;AACvBQ,aAAOQ,aAAaV,QAAQN;IAC9B,OAAO;AACLO,cAAQU,KAAK,QAAQX,QAAQN,IAAI,EAAE;IACrC;EACF;AAEA,SAAO;IAAET,OAAOgB;IAASd,OAAOe;EAAO;AACzC;",
  "names": ["useColor", "colors", "destructComputed", "class", "colorClasses", "style", "colorStyles", "computeColor", "useTextColor", "color", "textColorClasses", "textColorStyles", "text", "toValue", "useBackgroundColor", "backgroundColorClasses", "backgroundColorStyles", "background", "_colors", "classes", "styles", "isCssColor", "backgroundColor", "isParsableColor", "parseColor", "a", "textColor", "getForeground", "caretColor", "push"]
}
